// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/aws/api_interface/servicequotas_api_client.go
//
// Generated by this command:
//
//	mockgen-v0.4.0 -source=pkg/aws/api_interface/servicequotas_api_client.go -package=mocks -destination=pkg/aws/mocks/mock_servicequotas_api_client.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	servicequotas "github.com/aws/aws-sdk-go-v2/service/servicequotas"
	gomock "go.uber.org/mock/gomock"
)

// MockServiceQuotasApiClient is a mock of ServiceQuotasApiClient interface.
type MockServiceQuotasApiClient struct {
	ctrl     *gomock.Controller
	recorder *MockServiceQuotasApiClientMockRecorder
}

// MockServiceQuotasApiClientMockRecorder is the mock recorder for MockServiceQuotasApiClient.
type MockServiceQuotasApiClientMockRecorder struct {
	mock *MockServiceQuotasApiClient
}

// NewMockServiceQuotasApiClient creates a new mock instance.
func NewMockServiceQuotasApiClient(ctrl *gomock.Controller) *MockServiceQuotasApiClient {
	mock := &MockServiceQuotasApiClient{ctrl: ctrl}
	mock.recorder = &MockServiceQuotasApiClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceQuotasApiClient) EXPECT() *MockServiceQuotasApiClientMockRecorder {
	return m.recorder
}

// GetServiceQuota mocks base method.
func (m *MockServiceQuotasApiClient) GetServiceQuota(ctx context.Context, params *servicequotas.GetServiceQuotaInput, optFns ...func(*servicequotas.Options)) (*servicequotas.GetServiceQuotaOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetServiceQuota", varargs...)
	ret0, _ := ret[0].(*servicequotas.GetServiceQuotaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceQuota indicates an expected call of GetServiceQuota.
func (mr *MockServiceQuotasApiClientMockRecorder) GetServiceQuota(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceQuota", reflect.TypeOf((*MockServiceQuotasApiClient)(nil).GetServiceQuota), varargs...)
}

// ListServiceQuotas mocks base method.
func (m *MockServiceQuotasApiClient) ListServiceQuotas(ctx context.Context, params *servicequotas.ListServiceQuotasInput, optFns ...func(*servicequotas.Options)) (*servicequotas.ListServiceQuotasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServiceQuotas", varargs...)
	ret0, _ := ret[0].(*servicequotas.ListServiceQuotasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServiceQuotas indicates an expected call of ListServiceQuotas.
func (mr *MockServiceQuotasApiClientMockRecorder) ListServiceQuotas(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceQuotas", reflect.TypeOf((*MockServiceQuotasApiClient)(nil).ListServiceQuotas), varargs...)
}
