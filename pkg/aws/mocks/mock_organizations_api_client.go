// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/aws/organizations_api_client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	organizations "github.com/aws/aws-sdk-go-v2/service/organizations"
	gomock "github.com/golang/mock/gomock"
)

// MockOrganizationsApiClient is a mock of OrganizationsApiClient interface.
type MockOrganizationsApiClient struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationsApiClientMockRecorder
}

// MockOrganizationsApiClientMockRecorder is the mock recorder for MockOrganizationsApiClient.
type MockOrganizationsApiClientMockRecorder struct {
	mock *MockOrganizationsApiClient
}

// NewMockOrganizationsApiClient creates a new mock instance.
func NewMockOrganizationsApiClient(ctrl *gomock.Controller) *MockOrganizationsApiClient {
	mock := &MockOrganizationsApiClient{ctrl: ctrl}
	mock.recorder = &MockOrganizationsApiClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationsApiClient) EXPECT() *MockOrganizationsApiClientMockRecorder {
	return m.recorder
}

// AcceptHandshake mocks base method.
func (m *MockOrganizationsApiClient) AcceptHandshake(ctx context.Context, params *organizations.AcceptHandshakeInput, optFns ...func(*organizations.Options)) (*organizations.AcceptHandshakeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AcceptHandshake", varargs...)
	ret0, _ := ret[0].(*organizations.AcceptHandshakeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptHandshake indicates an expected call of AcceptHandshake.
func (mr *MockOrganizationsApiClientMockRecorder) AcceptHandshake(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptHandshake", reflect.TypeOf((*MockOrganizationsApiClient)(nil).AcceptHandshake), varargs...)
}

// AttachPolicy mocks base method.
func (m *MockOrganizationsApiClient) AttachPolicy(ctx context.Context, params *organizations.AttachPolicyInput, optFns ...func(*organizations.Options)) (*organizations.AttachPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AttachPolicy", varargs...)
	ret0, _ := ret[0].(*organizations.AttachPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachPolicy indicates an expected call of AttachPolicy.
func (mr *MockOrganizationsApiClientMockRecorder) AttachPolicy(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachPolicy", reflect.TypeOf((*MockOrganizationsApiClient)(nil).AttachPolicy), varargs...)
}

// CancelHandshake mocks base method.
func (m *MockOrganizationsApiClient) CancelHandshake(ctx context.Context, params *organizations.CancelHandshakeInput, optFns ...func(*organizations.Options)) (*organizations.CancelHandshakeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelHandshake", varargs...)
	ret0, _ := ret[0].(*organizations.CancelHandshakeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelHandshake indicates an expected call of CancelHandshake.
func (mr *MockOrganizationsApiClientMockRecorder) CancelHandshake(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelHandshake", reflect.TypeOf((*MockOrganizationsApiClient)(nil).CancelHandshake), varargs...)
}

// CloseAccount mocks base method.
func (m *MockOrganizationsApiClient) CloseAccount(ctx context.Context, params *organizations.CloseAccountInput, optFns ...func(*organizations.Options)) (*organizations.CloseAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CloseAccount", varargs...)
	ret0, _ := ret[0].(*organizations.CloseAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAccount indicates an expected call of CloseAccount.
func (mr *MockOrganizationsApiClientMockRecorder) CloseAccount(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAccount", reflect.TypeOf((*MockOrganizationsApiClient)(nil).CloseAccount), varargs...)
}

// CreateAccount mocks base method.
func (m *MockOrganizationsApiClient) CreateAccount(ctx context.Context, params *organizations.CreateAccountInput, optFns ...func(*organizations.Options)) (*organizations.CreateAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAccount", varargs...)
	ret0, _ := ret[0].(*organizations.CreateAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockOrganizationsApiClientMockRecorder) CreateAccount(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockOrganizationsApiClient)(nil).CreateAccount), varargs...)
}

// CreateGovCloudAccount mocks base method.
func (m *MockOrganizationsApiClient) CreateGovCloudAccount(ctx context.Context, params *organizations.CreateGovCloudAccountInput, optFns ...func(*organizations.Options)) (*organizations.CreateGovCloudAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGovCloudAccount", varargs...)
	ret0, _ := ret[0].(*organizations.CreateGovCloudAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGovCloudAccount indicates an expected call of CreateGovCloudAccount.
func (mr *MockOrganizationsApiClientMockRecorder) CreateGovCloudAccount(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGovCloudAccount", reflect.TypeOf((*MockOrganizationsApiClient)(nil).CreateGovCloudAccount), varargs...)
}

// CreateOrganization mocks base method.
func (m *MockOrganizationsApiClient) CreateOrganization(ctx context.Context, params *organizations.CreateOrganizationInput, optFns ...func(*organizations.Options)) (*organizations.CreateOrganizationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOrganization", varargs...)
	ret0, _ := ret[0].(*organizations.CreateOrganizationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrganization indicates an expected call of CreateOrganization.
func (mr *MockOrganizationsApiClientMockRecorder) CreateOrganization(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganization", reflect.TypeOf((*MockOrganizationsApiClient)(nil).CreateOrganization), varargs...)
}

// CreateOrganizationalUnit mocks base method.
func (m *MockOrganizationsApiClient) CreateOrganizationalUnit(ctx context.Context, params *organizations.CreateOrganizationalUnitInput, optFns ...func(*organizations.Options)) (*organizations.CreateOrganizationalUnitOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOrganizationalUnit", varargs...)
	ret0, _ := ret[0].(*organizations.CreateOrganizationalUnitOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrganizationalUnit indicates an expected call of CreateOrganizationalUnit.
func (mr *MockOrganizationsApiClientMockRecorder) CreateOrganizationalUnit(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganizationalUnit", reflect.TypeOf((*MockOrganizationsApiClient)(nil).CreateOrganizationalUnit), varargs...)
}

// CreatePolicy mocks base method.
func (m *MockOrganizationsApiClient) CreatePolicy(ctx context.Context, params *organizations.CreatePolicyInput, optFns ...func(*organizations.Options)) (*organizations.CreatePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePolicy", varargs...)
	ret0, _ := ret[0].(*organizations.CreatePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePolicy indicates an expected call of CreatePolicy.
func (mr *MockOrganizationsApiClientMockRecorder) CreatePolicy(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolicy", reflect.TypeOf((*MockOrganizationsApiClient)(nil).CreatePolicy), varargs...)
}

// DeclineHandshake mocks base method.
func (m *MockOrganizationsApiClient) DeclineHandshake(ctx context.Context, params *organizations.DeclineHandshakeInput, optFns ...func(*organizations.Options)) (*organizations.DeclineHandshakeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeclineHandshake", varargs...)
	ret0, _ := ret[0].(*organizations.DeclineHandshakeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeclineHandshake indicates an expected call of DeclineHandshake.
func (mr *MockOrganizationsApiClientMockRecorder) DeclineHandshake(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeclineHandshake", reflect.TypeOf((*MockOrganizationsApiClient)(nil).DeclineHandshake), varargs...)
}

// DeleteOrganization mocks base method.
func (m *MockOrganizationsApiClient) DeleteOrganization(ctx context.Context, params *organizations.DeleteOrganizationInput, optFns ...func(*organizations.Options)) (*organizations.DeleteOrganizationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteOrganization", varargs...)
	ret0, _ := ret[0].(*organizations.DeleteOrganizationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOrganization indicates an expected call of DeleteOrganization.
func (mr *MockOrganizationsApiClientMockRecorder) DeleteOrganization(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganization", reflect.TypeOf((*MockOrganizationsApiClient)(nil).DeleteOrganization), varargs...)
}

// DeleteOrganizationalUnit mocks base method.
func (m *MockOrganizationsApiClient) DeleteOrganizationalUnit(ctx context.Context, params *organizations.DeleteOrganizationalUnitInput, optFns ...func(*organizations.Options)) (*organizations.DeleteOrganizationalUnitOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteOrganizationalUnit", varargs...)
	ret0, _ := ret[0].(*organizations.DeleteOrganizationalUnitOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOrganizationalUnit indicates an expected call of DeleteOrganizationalUnit.
func (mr *MockOrganizationsApiClientMockRecorder) DeleteOrganizationalUnit(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganizationalUnit", reflect.TypeOf((*MockOrganizationsApiClient)(nil).DeleteOrganizationalUnit), varargs...)
}

// DeletePolicy mocks base method.
func (m *MockOrganizationsApiClient) DeletePolicy(ctx context.Context, params *organizations.DeletePolicyInput, optFns ...func(*organizations.Options)) (*organizations.DeletePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePolicy", varargs...)
	ret0, _ := ret[0].(*organizations.DeletePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePolicy indicates an expected call of DeletePolicy.
func (mr *MockOrganizationsApiClientMockRecorder) DeletePolicy(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicy", reflect.TypeOf((*MockOrganizationsApiClient)(nil).DeletePolicy), varargs...)
}

// DeleteResourcePolicy mocks base method.
func (m *MockOrganizationsApiClient) DeleteResourcePolicy(ctx context.Context, params *organizations.DeleteResourcePolicyInput, optFns ...func(*organizations.Options)) (*organizations.DeleteResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteResourcePolicy", varargs...)
	ret0, _ := ret[0].(*organizations.DeleteResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResourcePolicy indicates an expected call of DeleteResourcePolicy.
func (mr *MockOrganizationsApiClientMockRecorder) DeleteResourcePolicy(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourcePolicy", reflect.TypeOf((*MockOrganizationsApiClient)(nil).DeleteResourcePolicy), varargs...)
}

// DeregisterDelegatedAdministrator mocks base method.
func (m *MockOrganizationsApiClient) DeregisterDelegatedAdministrator(ctx context.Context, params *organizations.DeregisterDelegatedAdministratorInput, optFns ...func(*organizations.Options)) (*organizations.DeregisterDelegatedAdministratorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeregisterDelegatedAdministrator", varargs...)
	ret0, _ := ret[0].(*organizations.DeregisterDelegatedAdministratorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterDelegatedAdministrator indicates an expected call of DeregisterDelegatedAdministrator.
func (mr *MockOrganizationsApiClientMockRecorder) DeregisterDelegatedAdministrator(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterDelegatedAdministrator", reflect.TypeOf((*MockOrganizationsApiClient)(nil).DeregisterDelegatedAdministrator), varargs...)
}

// DescribeAccount mocks base method.
func (m *MockOrganizationsApiClient) DescribeAccount(ctx context.Context, params *organizations.DescribeAccountInput, optFns ...func(*organizations.Options)) (*organizations.DescribeAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAccount", varargs...)
	ret0, _ := ret[0].(*organizations.DescribeAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAccount indicates an expected call of DescribeAccount.
func (mr *MockOrganizationsApiClientMockRecorder) DescribeAccount(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccount", reflect.TypeOf((*MockOrganizationsApiClient)(nil).DescribeAccount), varargs...)
}

// DescribeCreateAccountStatus mocks base method.
func (m *MockOrganizationsApiClient) DescribeCreateAccountStatus(ctx context.Context, params *organizations.DescribeCreateAccountStatusInput, optFns ...func(*organizations.Options)) (*organizations.DescribeCreateAccountStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCreateAccountStatus", varargs...)
	ret0, _ := ret[0].(*organizations.DescribeCreateAccountStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCreateAccountStatus indicates an expected call of DescribeCreateAccountStatus.
func (mr *MockOrganizationsApiClientMockRecorder) DescribeCreateAccountStatus(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCreateAccountStatus", reflect.TypeOf((*MockOrganizationsApiClient)(nil).DescribeCreateAccountStatus), varargs...)
}

// DescribeEffectivePolicy mocks base method.
func (m *MockOrganizationsApiClient) DescribeEffectivePolicy(ctx context.Context, params *organizations.DescribeEffectivePolicyInput, optFns ...func(*organizations.Options)) (*organizations.DescribeEffectivePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEffectivePolicy", varargs...)
	ret0, _ := ret[0].(*organizations.DescribeEffectivePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEffectivePolicy indicates an expected call of DescribeEffectivePolicy.
func (mr *MockOrganizationsApiClientMockRecorder) DescribeEffectivePolicy(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEffectivePolicy", reflect.TypeOf((*MockOrganizationsApiClient)(nil).DescribeEffectivePolicy), varargs...)
}

// DescribeHandshake mocks base method.
func (m *MockOrganizationsApiClient) DescribeHandshake(ctx context.Context, params *organizations.DescribeHandshakeInput, optFns ...func(*organizations.Options)) (*organizations.DescribeHandshakeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeHandshake", varargs...)
	ret0, _ := ret[0].(*organizations.DescribeHandshakeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeHandshake indicates an expected call of DescribeHandshake.
func (mr *MockOrganizationsApiClientMockRecorder) DescribeHandshake(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeHandshake", reflect.TypeOf((*MockOrganizationsApiClient)(nil).DescribeHandshake), varargs...)
}

// DescribeOrganization mocks base method.
func (m *MockOrganizationsApiClient) DescribeOrganization(ctx context.Context, params *organizations.DescribeOrganizationInput, optFns ...func(*organizations.Options)) (*organizations.DescribeOrganizationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeOrganization", varargs...)
	ret0, _ := ret[0].(*organizations.DescribeOrganizationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeOrganization indicates an expected call of DescribeOrganization.
func (mr *MockOrganizationsApiClientMockRecorder) DescribeOrganization(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOrganization", reflect.TypeOf((*MockOrganizationsApiClient)(nil).DescribeOrganization), varargs...)
}

// DescribeOrganizationalUnit mocks base method.
func (m *MockOrganizationsApiClient) DescribeOrganizationalUnit(ctx context.Context, params *organizations.DescribeOrganizationalUnitInput, optFns ...func(*organizations.Options)) (*organizations.DescribeOrganizationalUnitOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeOrganizationalUnit", varargs...)
	ret0, _ := ret[0].(*organizations.DescribeOrganizationalUnitOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeOrganizationalUnit indicates an expected call of DescribeOrganizationalUnit.
func (mr *MockOrganizationsApiClientMockRecorder) DescribeOrganizationalUnit(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOrganizationalUnit", reflect.TypeOf((*MockOrganizationsApiClient)(nil).DescribeOrganizationalUnit), varargs...)
}

// DescribePolicy mocks base method.
func (m *MockOrganizationsApiClient) DescribePolicy(ctx context.Context, params *organizations.DescribePolicyInput, optFns ...func(*organizations.Options)) (*organizations.DescribePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePolicy", varargs...)
	ret0, _ := ret[0].(*organizations.DescribePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePolicy indicates an expected call of DescribePolicy.
func (mr *MockOrganizationsApiClientMockRecorder) DescribePolicy(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePolicy", reflect.TypeOf((*MockOrganizationsApiClient)(nil).DescribePolicy), varargs...)
}

// DescribeResourcePolicy mocks base method.
func (m *MockOrganizationsApiClient) DescribeResourcePolicy(ctx context.Context, params *organizations.DescribeResourcePolicyInput, optFns ...func(*organizations.Options)) (*organizations.DescribeResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeResourcePolicy", varargs...)
	ret0, _ := ret[0].(*organizations.DescribeResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeResourcePolicy indicates an expected call of DescribeResourcePolicy.
func (mr *MockOrganizationsApiClientMockRecorder) DescribeResourcePolicy(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeResourcePolicy", reflect.TypeOf((*MockOrganizationsApiClient)(nil).DescribeResourcePolicy), varargs...)
}

// DetachPolicy mocks base method.
func (m *MockOrganizationsApiClient) DetachPolicy(ctx context.Context, params *organizations.DetachPolicyInput, optFns ...func(*organizations.Options)) (*organizations.DetachPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DetachPolicy", varargs...)
	ret0, _ := ret[0].(*organizations.DetachPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachPolicy indicates an expected call of DetachPolicy.
func (mr *MockOrganizationsApiClientMockRecorder) DetachPolicy(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachPolicy", reflect.TypeOf((*MockOrganizationsApiClient)(nil).DetachPolicy), varargs...)
}

// DisableAWSServiceAccess mocks base method.
func (m *MockOrganizationsApiClient) DisableAWSServiceAccess(ctx context.Context, params *organizations.DisableAWSServiceAccessInput, optFns ...func(*organizations.Options)) (*organizations.DisableAWSServiceAccessOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisableAWSServiceAccess", varargs...)
	ret0, _ := ret[0].(*organizations.DisableAWSServiceAccessOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableAWSServiceAccess indicates an expected call of DisableAWSServiceAccess.
func (mr *MockOrganizationsApiClientMockRecorder) DisableAWSServiceAccess(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableAWSServiceAccess", reflect.TypeOf((*MockOrganizationsApiClient)(nil).DisableAWSServiceAccess), varargs...)
}

// DisablePolicyType mocks base method.
func (m *MockOrganizationsApiClient) DisablePolicyType(ctx context.Context, params *organizations.DisablePolicyTypeInput, optFns ...func(*organizations.Options)) (*organizations.DisablePolicyTypeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisablePolicyType", varargs...)
	ret0, _ := ret[0].(*organizations.DisablePolicyTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisablePolicyType indicates an expected call of DisablePolicyType.
func (mr *MockOrganizationsApiClientMockRecorder) DisablePolicyType(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisablePolicyType", reflect.TypeOf((*MockOrganizationsApiClient)(nil).DisablePolicyType), varargs...)
}

// EnableAWSServiceAccess mocks base method.
func (m *MockOrganizationsApiClient) EnableAWSServiceAccess(ctx context.Context, params *organizations.EnableAWSServiceAccessInput, optFns ...func(*organizations.Options)) (*organizations.EnableAWSServiceAccessOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnableAWSServiceAccess", varargs...)
	ret0, _ := ret[0].(*organizations.EnableAWSServiceAccessOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableAWSServiceAccess indicates an expected call of EnableAWSServiceAccess.
func (mr *MockOrganizationsApiClientMockRecorder) EnableAWSServiceAccess(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableAWSServiceAccess", reflect.TypeOf((*MockOrganizationsApiClient)(nil).EnableAWSServiceAccess), varargs...)
}

// EnableAllFeatures mocks base method.
func (m *MockOrganizationsApiClient) EnableAllFeatures(ctx context.Context, params *organizations.EnableAllFeaturesInput, optFns ...func(*organizations.Options)) (*organizations.EnableAllFeaturesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnableAllFeatures", varargs...)
	ret0, _ := ret[0].(*organizations.EnableAllFeaturesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableAllFeatures indicates an expected call of EnableAllFeatures.
func (mr *MockOrganizationsApiClientMockRecorder) EnableAllFeatures(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableAllFeatures", reflect.TypeOf((*MockOrganizationsApiClient)(nil).EnableAllFeatures), varargs...)
}

// EnablePolicyType mocks base method.
func (m *MockOrganizationsApiClient) EnablePolicyType(ctx context.Context, params *organizations.EnablePolicyTypeInput, optFns ...func(*organizations.Options)) (*organizations.EnablePolicyTypeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnablePolicyType", varargs...)
	ret0, _ := ret[0].(*organizations.EnablePolicyTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnablePolicyType indicates an expected call of EnablePolicyType.
func (mr *MockOrganizationsApiClientMockRecorder) EnablePolicyType(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnablePolicyType", reflect.TypeOf((*MockOrganizationsApiClient)(nil).EnablePolicyType), varargs...)
}

// InviteAccountToOrganization mocks base method.
func (m *MockOrganizationsApiClient) InviteAccountToOrganization(ctx context.Context, params *organizations.InviteAccountToOrganizationInput, optFns ...func(*organizations.Options)) (*organizations.InviteAccountToOrganizationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InviteAccountToOrganization", varargs...)
	ret0, _ := ret[0].(*organizations.InviteAccountToOrganizationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InviteAccountToOrganization indicates an expected call of InviteAccountToOrganization.
func (mr *MockOrganizationsApiClientMockRecorder) InviteAccountToOrganization(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteAccountToOrganization", reflect.TypeOf((*MockOrganizationsApiClient)(nil).InviteAccountToOrganization), varargs...)
}

// LeaveOrganization mocks base method.
func (m *MockOrganizationsApiClient) LeaveOrganization(ctx context.Context, params *organizations.LeaveOrganizationInput, optFns ...func(*organizations.Options)) (*organizations.LeaveOrganizationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LeaveOrganization", varargs...)
	ret0, _ := ret[0].(*organizations.LeaveOrganizationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LeaveOrganization indicates an expected call of LeaveOrganization.
func (mr *MockOrganizationsApiClientMockRecorder) LeaveOrganization(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveOrganization", reflect.TypeOf((*MockOrganizationsApiClient)(nil).LeaveOrganization), varargs...)
}

// ListAWSServiceAccessForOrganization mocks base method.
func (m *MockOrganizationsApiClient) ListAWSServiceAccessForOrganization(ctx context.Context, params *organizations.ListAWSServiceAccessForOrganizationInput, optFns ...func(*organizations.Options)) (*organizations.ListAWSServiceAccessForOrganizationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAWSServiceAccessForOrganization", varargs...)
	ret0, _ := ret[0].(*organizations.ListAWSServiceAccessForOrganizationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAWSServiceAccessForOrganization indicates an expected call of ListAWSServiceAccessForOrganization.
func (mr *MockOrganizationsApiClientMockRecorder) ListAWSServiceAccessForOrganization(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAWSServiceAccessForOrganization", reflect.TypeOf((*MockOrganizationsApiClient)(nil).ListAWSServiceAccessForOrganization), varargs...)
}

// ListAccounts mocks base method.
func (m *MockOrganizationsApiClient) ListAccounts(ctx context.Context, params *organizations.ListAccountsInput, optFns ...func(*organizations.Options)) (*organizations.ListAccountsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccounts", varargs...)
	ret0, _ := ret[0].(*organizations.ListAccountsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccounts indicates an expected call of ListAccounts.
func (mr *MockOrganizationsApiClientMockRecorder) ListAccounts(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccounts", reflect.TypeOf((*MockOrganizationsApiClient)(nil).ListAccounts), varargs...)
}

// ListAccountsForParent mocks base method.
func (m *MockOrganizationsApiClient) ListAccountsForParent(ctx context.Context, params *organizations.ListAccountsForParentInput, optFns ...func(*organizations.Options)) (*organizations.ListAccountsForParentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccountsForParent", varargs...)
	ret0, _ := ret[0].(*organizations.ListAccountsForParentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountsForParent indicates an expected call of ListAccountsForParent.
func (mr *MockOrganizationsApiClientMockRecorder) ListAccountsForParent(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountsForParent", reflect.TypeOf((*MockOrganizationsApiClient)(nil).ListAccountsForParent), varargs...)
}

// ListChildren mocks base method.
func (m *MockOrganizationsApiClient) ListChildren(ctx context.Context, params *organizations.ListChildrenInput, optFns ...func(*organizations.Options)) (*organizations.ListChildrenOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListChildren", varargs...)
	ret0, _ := ret[0].(*organizations.ListChildrenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChildren indicates an expected call of ListChildren.
func (mr *MockOrganizationsApiClientMockRecorder) ListChildren(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChildren", reflect.TypeOf((*MockOrganizationsApiClient)(nil).ListChildren), varargs...)
}

// ListCreateAccountStatus mocks base method.
func (m *MockOrganizationsApiClient) ListCreateAccountStatus(ctx context.Context, params *organizations.ListCreateAccountStatusInput, optFns ...func(*organizations.Options)) (*organizations.ListCreateAccountStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCreateAccountStatus", varargs...)
	ret0, _ := ret[0].(*organizations.ListCreateAccountStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCreateAccountStatus indicates an expected call of ListCreateAccountStatus.
func (mr *MockOrganizationsApiClientMockRecorder) ListCreateAccountStatus(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCreateAccountStatus", reflect.TypeOf((*MockOrganizationsApiClient)(nil).ListCreateAccountStatus), varargs...)
}

// ListDelegatedAdministrators mocks base method.
func (m *MockOrganizationsApiClient) ListDelegatedAdministrators(ctx context.Context, params *organizations.ListDelegatedAdministratorsInput, optFns ...func(*organizations.Options)) (*organizations.ListDelegatedAdministratorsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDelegatedAdministrators", varargs...)
	ret0, _ := ret[0].(*organizations.ListDelegatedAdministratorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDelegatedAdministrators indicates an expected call of ListDelegatedAdministrators.
func (mr *MockOrganizationsApiClientMockRecorder) ListDelegatedAdministrators(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDelegatedAdministrators", reflect.TypeOf((*MockOrganizationsApiClient)(nil).ListDelegatedAdministrators), varargs...)
}

// ListDelegatedServicesForAccount mocks base method.
func (m *MockOrganizationsApiClient) ListDelegatedServicesForAccount(ctx context.Context, params *organizations.ListDelegatedServicesForAccountInput, optFns ...func(*organizations.Options)) (*organizations.ListDelegatedServicesForAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDelegatedServicesForAccount", varargs...)
	ret0, _ := ret[0].(*organizations.ListDelegatedServicesForAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDelegatedServicesForAccount indicates an expected call of ListDelegatedServicesForAccount.
func (mr *MockOrganizationsApiClientMockRecorder) ListDelegatedServicesForAccount(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDelegatedServicesForAccount", reflect.TypeOf((*MockOrganizationsApiClient)(nil).ListDelegatedServicesForAccount), varargs...)
}

// ListHandshakesForAccount mocks base method.
func (m *MockOrganizationsApiClient) ListHandshakesForAccount(ctx context.Context, params *organizations.ListHandshakesForAccountInput, optFns ...func(*organizations.Options)) (*organizations.ListHandshakesForAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListHandshakesForAccount", varargs...)
	ret0, _ := ret[0].(*organizations.ListHandshakesForAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHandshakesForAccount indicates an expected call of ListHandshakesForAccount.
func (mr *MockOrganizationsApiClientMockRecorder) ListHandshakesForAccount(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHandshakesForAccount", reflect.TypeOf((*MockOrganizationsApiClient)(nil).ListHandshakesForAccount), varargs...)
}

// ListHandshakesForOrganization mocks base method.
func (m *MockOrganizationsApiClient) ListHandshakesForOrganization(ctx context.Context, params *organizations.ListHandshakesForOrganizationInput, optFns ...func(*organizations.Options)) (*organizations.ListHandshakesForOrganizationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListHandshakesForOrganization", varargs...)
	ret0, _ := ret[0].(*organizations.ListHandshakesForOrganizationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHandshakesForOrganization indicates an expected call of ListHandshakesForOrganization.
func (mr *MockOrganizationsApiClientMockRecorder) ListHandshakesForOrganization(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHandshakesForOrganization", reflect.TypeOf((*MockOrganizationsApiClient)(nil).ListHandshakesForOrganization), varargs...)
}

// ListOrganizationalUnitsForParent mocks base method.
func (m *MockOrganizationsApiClient) ListOrganizationalUnitsForParent(ctx context.Context, params *organizations.ListOrganizationalUnitsForParentInput, optFns ...func(*organizations.Options)) (*organizations.ListOrganizationalUnitsForParentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOrganizationalUnitsForParent", varargs...)
	ret0, _ := ret[0].(*organizations.ListOrganizationalUnitsForParentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrganizationalUnitsForParent indicates an expected call of ListOrganizationalUnitsForParent.
func (mr *MockOrganizationsApiClientMockRecorder) ListOrganizationalUnitsForParent(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationalUnitsForParent", reflect.TypeOf((*MockOrganizationsApiClient)(nil).ListOrganizationalUnitsForParent), varargs...)
}

// ListParents mocks base method.
func (m *MockOrganizationsApiClient) ListParents(ctx context.Context, params *organizations.ListParentsInput, optFns ...func(*organizations.Options)) (*organizations.ListParentsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListParents", varargs...)
	ret0, _ := ret[0].(*organizations.ListParentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListParents indicates an expected call of ListParents.
func (mr *MockOrganizationsApiClientMockRecorder) ListParents(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListParents", reflect.TypeOf((*MockOrganizationsApiClient)(nil).ListParents), varargs...)
}

// ListPolicies mocks base method.
func (m *MockOrganizationsApiClient) ListPolicies(ctx context.Context, params *organizations.ListPoliciesInput, optFns ...func(*organizations.Options)) (*organizations.ListPoliciesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPolicies", varargs...)
	ret0, _ := ret[0].(*organizations.ListPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPolicies indicates an expected call of ListPolicies.
func (mr *MockOrganizationsApiClientMockRecorder) ListPolicies(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPolicies", reflect.TypeOf((*MockOrganizationsApiClient)(nil).ListPolicies), varargs...)
}

// ListPoliciesForTarget mocks base method.
func (m *MockOrganizationsApiClient) ListPoliciesForTarget(ctx context.Context, params *organizations.ListPoliciesForTargetInput, optFns ...func(*organizations.Options)) (*organizations.ListPoliciesForTargetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPoliciesForTarget", varargs...)
	ret0, _ := ret[0].(*organizations.ListPoliciesForTargetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPoliciesForTarget indicates an expected call of ListPoliciesForTarget.
func (mr *MockOrganizationsApiClientMockRecorder) ListPoliciesForTarget(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPoliciesForTarget", reflect.TypeOf((*MockOrganizationsApiClient)(nil).ListPoliciesForTarget), varargs...)
}

// ListRoots mocks base method.
func (m *MockOrganizationsApiClient) ListRoots(ctx context.Context, params *organizations.ListRootsInput, optFns ...func(*organizations.Options)) (*organizations.ListRootsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRoots", varargs...)
	ret0, _ := ret[0].(*organizations.ListRootsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoots indicates an expected call of ListRoots.
func (mr *MockOrganizationsApiClientMockRecorder) ListRoots(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoots", reflect.TypeOf((*MockOrganizationsApiClient)(nil).ListRoots), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockOrganizationsApiClient) ListTagsForResource(ctx context.Context, params *organizations.ListTagsForResourceInput, optFns ...func(*organizations.Options)) (*organizations.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResource", varargs...)
	ret0, _ := ret[0].(*organizations.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockOrganizationsApiClientMockRecorder) ListTagsForResource(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockOrganizationsApiClient)(nil).ListTagsForResource), varargs...)
}

// ListTargetsForPolicy mocks base method.
func (m *MockOrganizationsApiClient) ListTargetsForPolicy(ctx context.Context, params *organizations.ListTargetsForPolicyInput, optFns ...func(*organizations.Options)) (*organizations.ListTargetsForPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTargetsForPolicy", varargs...)
	ret0, _ := ret[0].(*organizations.ListTargetsForPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTargetsForPolicy indicates an expected call of ListTargetsForPolicy.
func (mr *MockOrganizationsApiClientMockRecorder) ListTargetsForPolicy(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTargetsForPolicy", reflect.TypeOf((*MockOrganizationsApiClient)(nil).ListTargetsForPolicy), varargs...)
}

// MoveAccount mocks base method.
func (m *MockOrganizationsApiClient) MoveAccount(ctx context.Context, params *organizations.MoveAccountInput, optFns ...func(*organizations.Options)) (*organizations.MoveAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MoveAccount", varargs...)
	ret0, _ := ret[0].(*organizations.MoveAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveAccount indicates an expected call of MoveAccount.
func (mr *MockOrganizationsApiClientMockRecorder) MoveAccount(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveAccount", reflect.TypeOf((*MockOrganizationsApiClient)(nil).MoveAccount), varargs...)
}

// PutResourcePolicy mocks base method.
func (m *MockOrganizationsApiClient) PutResourcePolicy(ctx context.Context, params *organizations.PutResourcePolicyInput, optFns ...func(*organizations.Options)) (*organizations.PutResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutResourcePolicy", varargs...)
	ret0, _ := ret[0].(*organizations.PutResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutResourcePolicy indicates an expected call of PutResourcePolicy.
func (mr *MockOrganizationsApiClientMockRecorder) PutResourcePolicy(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutResourcePolicy", reflect.TypeOf((*MockOrganizationsApiClient)(nil).PutResourcePolicy), varargs...)
}

// RegisterDelegatedAdministrator mocks base method.
func (m *MockOrganizationsApiClient) RegisterDelegatedAdministrator(ctx context.Context, params *organizations.RegisterDelegatedAdministratorInput, optFns ...func(*organizations.Options)) (*organizations.RegisterDelegatedAdministratorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterDelegatedAdministrator", varargs...)
	ret0, _ := ret[0].(*organizations.RegisterDelegatedAdministratorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterDelegatedAdministrator indicates an expected call of RegisterDelegatedAdministrator.
func (mr *MockOrganizationsApiClientMockRecorder) RegisterDelegatedAdministrator(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterDelegatedAdministrator", reflect.TypeOf((*MockOrganizationsApiClient)(nil).RegisterDelegatedAdministrator), varargs...)
}

// RemoveAccountFromOrganization mocks base method.
func (m *MockOrganizationsApiClient) RemoveAccountFromOrganization(ctx context.Context, params *organizations.RemoveAccountFromOrganizationInput, optFns ...func(*organizations.Options)) (*organizations.RemoveAccountFromOrganizationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveAccountFromOrganization", varargs...)
	ret0, _ := ret[0].(*organizations.RemoveAccountFromOrganizationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveAccountFromOrganization indicates an expected call of RemoveAccountFromOrganization.
func (mr *MockOrganizationsApiClientMockRecorder) RemoveAccountFromOrganization(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAccountFromOrganization", reflect.TypeOf((*MockOrganizationsApiClient)(nil).RemoveAccountFromOrganization), varargs...)
}

// TagResource mocks base method.
func (m *MockOrganizationsApiClient) TagResource(ctx context.Context, params *organizations.TagResourceInput, optFns ...func(*organizations.Options)) (*organizations.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResource", varargs...)
	ret0, _ := ret[0].(*organizations.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockOrganizationsApiClientMockRecorder) TagResource(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockOrganizationsApiClient)(nil).TagResource), varargs...)
}

// UntagResource mocks base method.
func (m *MockOrganizationsApiClient) UntagResource(ctx context.Context, params *organizations.UntagResourceInput, optFns ...func(*organizations.Options)) (*organizations.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResource", varargs...)
	ret0, _ := ret[0].(*organizations.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockOrganizationsApiClientMockRecorder) UntagResource(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockOrganizationsApiClient)(nil).UntagResource), varargs...)
}

// UpdateOrganizationalUnit mocks base method.
func (m *MockOrganizationsApiClient) UpdateOrganizationalUnit(ctx context.Context, params *organizations.UpdateOrganizationalUnitInput, optFns ...func(*organizations.Options)) (*organizations.UpdateOrganizationalUnitOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOrganizationalUnit", varargs...)
	ret0, _ := ret[0].(*organizations.UpdateOrganizationalUnitOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrganizationalUnit indicates an expected call of UpdateOrganizationalUnit.
func (mr *MockOrganizationsApiClientMockRecorder) UpdateOrganizationalUnit(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganizationalUnit", reflect.TypeOf((*MockOrganizationsApiClient)(nil).UpdateOrganizationalUnit), varargs...)
}

// UpdatePolicy mocks base method.
func (m *MockOrganizationsApiClient) UpdatePolicy(ctx context.Context, params *organizations.UpdatePolicyInput, optFns ...func(*organizations.Options)) (*organizations.UpdatePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePolicy", varargs...)
	ret0, _ := ret[0].(*organizations.UpdatePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePolicy indicates an expected call of UpdatePolicy.
func (mr *MockOrganizationsApiClientMockRecorder) UpdatePolicy(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePolicy", reflect.TypeOf((*MockOrganizationsApiClient)(nil).UpdatePolicy), varargs...)
}
