// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/aws/api_interface/organizations_api_client.go
//
// Generated by this command:
//
//	mockgen-v0.4.0 -source=pkg/aws/api_interface/organizations_api_client.go -package=mocks -destination=pkg/aws/mocks/mock_organizations_api_client.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	organizations "github.com/aws/aws-sdk-go-v2/service/organizations"
	gomock "go.uber.org/mock/gomock"
)

// MockOrganizationsApiClient is a mock of OrganizationsApiClient interface.
type MockOrganizationsApiClient struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationsApiClientMockRecorder
}

// MockOrganizationsApiClientMockRecorder is the mock recorder for MockOrganizationsApiClient.
type MockOrganizationsApiClientMockRecorder struct {
	mock *MockOrganizationsApiClient
}

// NewMockOrganizationsApiClient creates a new mock instance.
func NewMockOrganizationsApiClient(ctrl *gomock.Controller) *MockOrganizationsApiClient {
	mock := &MockOrganizationsApiClient{ctrl: ctrl}
	mock.recorder = &MockOrganizationsApiClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationsApiClient) EXPECT() *MockOrganizationsApiClientMockRecorder {
	return m.recorder
}

// CloseAccount mocks base method.
func (m *MockOrganizationsApiClient) CloseAccount(ctx context.Context, params *organizations.CloseAccountInput, optFns ...func(*organizations.Options)) (*organizations.CloseAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CloseAccount", varargs...)
	ret0, _ := ret[0].(*organizations.CloseAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAccount indicates an expected call of CloseAccount.
func (mr *MockOrganizationsApiClientMockRecorder) CloseAccount(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAccount", reflect.TypeOf((*MockOrganizationsApiClient)(nil).CloseAccount), varargs...)
}

// CreateOrganization mocks base method.
func (m *MockOrganizationsApiClient) CreateOrganization(ctx context.Context, params *organizations.CreateOrganizationInput, optFns ...func(*organizations.Options)) (*organizations.CreateOrganizationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOrganization", varargs...)
	ret0, _ := ret[0].(*organizations.CreateOrganizationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrganization indicates an expected call of CreateOrganization.
func (mr *MockOrganizationsApiClientMockRecorder) CreateOrganization(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganization", reflect.TypeOf((*MockOrganizationsApiClient)(nil).CreateOrganization), varargs...)
}

// CreatePolicy mocks base method.
func (m *MockOrganizationsApiClient) CreatePolicy(ctx context.Context, params *organizations.CreatePolicyInput, optFns ...func(*organizations.Options)) (*organizations.CreatePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePolicy", varargs...)
	ret0, _ := ret[0].(*organizations.CreatePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePolicy indicates an expected call of CreatePolicy.
func (mr *MockOrganizationsApiClientMockRecorder) CreatePolicy(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolicy", reflect.TypeOf((*MockOrganizationsApiClient)(nil).CreatePolicy), varargs...)
}

// DeletePolicy mocks base method.
func (m *MockOrganizationsApiClient) DeletePolicy(ctx context.Context, params *organizations.DeletePolicyInput, optFns ...func(*organizations.Options)) (*organizations.DeletePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePolicy", varargs...)
	ret0, _ := ret[0].(*organizations.DeletePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePolicy indicates an expected call of DeletePolicy.
func (mr *MockOrganizationsApiClientMockRecorder) DeletePolicy(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicy", reflect.TypeOf((*MockOrganizationsApiClient)(nil).DeletePolicy), varargs...)
}

// DeleteResourcePolicy mocks base method.
func (m *MockOrganizationsApiClient) DeleteResourcePolicy(ctx context.Context, params *organizations.DeleteResourcePolicyInput, optFns ...func(*organizations.Options)) (*organizations.DeleteResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteResourcePolicy", varargs...)
	ret0, _ := ret[0].(*organizations.DeleteResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResourcePolicy indicates an expected call of DeleteResourcePolicy.
func (mr *MockOrganizationsApiClientMockRecorder) DeleteResourcePolicy(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourcePolicy", reflect.TypeOf((*MockOrganizationsApiClient)(nil).DeleteResourcePolicy), varargs...)
}

// ListPolicies mocks base method.
func (m *MockOrganizationsApiClient) ListPolicies(ctx context.Context, params *organizations.ListPoliciesInput, optFns ...func(*organizations.Options)) (*organizations.ListPoliciesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPolicies", varargs...)
	ret0, _ := ret[0].(*organizations.ListPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPolicies indicates an expected call of ListPolicies.
func (mr *MockOrganizationsApiClientMockRecorder) ListPolicies(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPolicies", reflect.TypeOf((*MockOrganizationsApiClient)(nil).ListPolicies), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockOrganizationsApiClient) ListTagsForResource(ctx context.Context, params *organizations.ListTagsForResourceInput, optFns ...func(*organizations.Options)) (*organizations.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResource", varargs...)
	ret0, _ := ret[0].(*organizations.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockOrganizationsApiClientMockRecorder) ListTagsForResource(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockOrganizationsApiClient)(nil).ListTagsForResource), varargs...)
}

// PutResourcePolicy mocks base method.
func (m *MockOrganizationsApiClient) PutResourcePolicy(ctx context.Context, params *organizations.PutResourcePolicyInput, optFns ...func(*organizations.Options)) (*organizations.PutResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutResourcePolicy", varargs...)
	ret0, _ := ret[0].(*organizations.PutResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutResourcePolicy indicates an expected call of PutResourcePolicy.
func (mr *MockOrganizationsApiClientMockRecorder) PutResourcePolicy(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutResourcePolicy", reflect.TypeOf((*MockOrganizationsApiClient)(nil).PutResourcePolicy), varargs...)
}

// TagResource mocks base method.
func (m *MockOrganizationsApiClient) TagResource(ctx context.Context, params *organizations.TagResourceInput, optFns ...func(*organizations.Options)) (*organizations.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResource", varargs...)
	ret0, _ := ret[0].(*organizations.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockOrganizationsApiClientMockRecorder) TagResource(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockOrganizationsApiClient)(nil).TagResource), varargs...)
}

// UntagResource mocks base method.
func (m *MockOrganizationsApiClient) UntagResource(ctx context.Context, params *organizations.UntagResourceInput, optFns ...func(*organizations.Options)) (*organizations.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResource", varargs...)
	ret0, _ := ret[0].(*organizations.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockOrganizationsApiClientMockRecorder) UntagResource(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockOrganizationsApiClient)(nil).UntagResource), varargs...)
}
