// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/aws/cloudformation_api_client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	cloudformation "github.com/aws/aws-sdk-go-v2/service/cloudformation"
	gomock "github.com/golang/mock/gomock"
)

// MockCloudFormationApiClient is a mock of CloudFormationApiClient interface.
type MockCloudFormationApiClient struct {
	ctrl     *gomock.Controller
	recorder *MockCloudFormationApiClientMockRecorder
}

// MockCloudFormationApiClientMockRecorder is the mock recorder for MockCloudFormationApiClient.
type MockCloudFormationApiClientMockRecorder struct {
	mock *MockCloudFormationApiClient
}

// NewMockCloudFormationApiClient creates a new mock instance.
func NewMockCloudFormationApiClient(ctrl *gomock.Controller) *MockCloudFormationApiClient {
	mock := &MockCloudFormationApiClient{ctrl: ctrl}
	mock.recorder = &MockCloudFormationApiClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudFormationApiClient) EXPECT() *MockCloudFormationApiClientMockRecorder {
	return m.recorder
}

// ActivateOrganizationsAccess mocks base method.
func (m *MockCloudFormationApiClient) ActivateOrganizationsAccess(ctx context.Context, params *cloudformation.ActivateOrganizationsAccessInput, optFns ...func(*cloudformation.Options)) (*cloudformation.ActivateOrganizationsAccessOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ActivateOrganizationsAccess", varargs...)
	ret0, _ := ret[0].(*cloudformation.ActivateOrganizationsAccessOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActivateOrganizationsAccess indicates an expected call of ActivateOrganizationsAccess.
func (mr *MockCloudFormationApiClientMockRecorder) ActivateOrganizationsAccess(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateOrganizationsAccess", reflect.TypeOf((*MockCloudFormationApiClient)(nil).ActivateOrganizationsAccess), varargs...)
}

// ActivateType mocks base method.
func (m *MockCloudFormationApiClient) ActivateType(ctx context.Context, params *cloudformation.ActivateTypeInput, optFns ...func(*cloudformation.Options)) (*cloudformation.ActivateTypeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ActivateType", varargs...)
	ret0, _ := ret[0].(*cloudformation.ActivateTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActivateType indicates an expected call of ActivateType.
func (mr *MockCloudFormationApiClientMockRecorder) ActivateType(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateType", reflect.TypeOf((*MockCloudFormationApiClient)(nil).ActivateType), varargs...)
}

// BatchDescribeTypeConfigurations mocks base method.
func (m *MockCloudFormationApiClient) BatchDescribeTypeConfigurations(ctx context.Context, params *cloudformation.BatchDescribeTypeConfigurationsInput, optFns ...func(*cloudformation.Options)) (*cloudformation.BatchDescribeTypeConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchDescribeTypeConfigurations", varargs...)
	ret0, _ := ret[0].(*cloudformation.BatchDescribeTypeConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDescribeTypeConfigurations indicates an expected call of BatchDescribeTypeConfigurations.
func (mr *MockCloudFormationApiClientMockRecorder) BatchDescribeTypeConfigurations(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDescribeTypeConfigurations", reflect.TypeOf((*MockCloudFormationApiClient)(nil).BatchDescribeTypeConfigurations), varargs...)
}

// CancelUpdateStack mocks base method.
func (m *MockCloudFormationApiClient) CancelUpdateStack(ctx context.Context, params *cloudformation.CancelUpdateStackInput, optFns ...func(*cloudformation.Options)) (*cloudformation.CancelUpdateStackOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelUpdateStack", varargs...)
	ret0, _ := ret[0].(*cloudformation.CancelUpdateStackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelUpdateStack indicates an expected call of CancelUpdateStack.
func (mr *MockCloudFormationApiClientMockRecorder) CancelUpdateStack(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelUpdateStack", reflect.TypeOf((*MockCloudFormationApiClient)(nil).CancelUpdateStack), varargs...)
}

// ContinueUpdateRollback mocks base method.
func (m *MockCloudFormationApiClient) ContinueUpdateRollback(ctx context.Context, params *cloudformation.ContinueUpdateRollbackInput, optFns ...func(*cloudformation.Options)) (*cloudformation.ContinueUpdateRollbackOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ContinueUpdateRollback", varargs...)
	ret0, _ := ret[0].(*cloudformation.ContinueUpdateRollbackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContinueUpdateRollback indicates an expected call of ContinueUpdateRollback.
func (mr *MockCloudFormationApiClientMockRecorder) ContinueUpdateRollback(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContinueUpdateRollback", reflect.TypeOf((*MockCloudFormationApiClient)(nil).ContinueUpdateRollback), varargs...)
}

// CreateChangeSet mocks base method.
func (m *MockCloudFormationApiClient) CreateChangeSet(ctx context.Context, params *cloudformation.CreateChangeSetInput, optFns ...func(*cloudformation.Options)) (*cloudformation.CreateChangeSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateChangeSet", varargs...)
	ret0, _ := ret[0].(*cloudformation.CreateChangeSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChangeSet indicates an expected call of CreateChangeSet.
func (mr *MockCloudFormationApiClientMockRecorder) CreateChangeSet(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChangeSet", reflect.TypeOf((*MockCloudFormationApiClient)(nil).CreateChangeSet), varargs...)
}

// CreateStack mocks base method.
func (m *MockCloudFormationApiClient) CreateStack(ctx context.Context, params *cloudformation.CreateStackInput, optFns ...func(*cloudformation.Options)) (*cloudformation.CreateStackOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateStack", varargs...)
	ret0, _ := ret[0].(*cloudformation.CreateStackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStack indicates an expected call of CreateStack.
func (mr *MockCloudFormationApiClientMockRecorder) CreateStack(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStack", reflect.TypeOf((*MockCloudFormationApiClient)(nil).CreateStack), varargs...)
}

// CreateStackInstances mocks base method.
func (m *MockCloudFormationApiClient) CreateStackInstances(ctx context.Context, params *cloudformation.CreateStackInstancesInput, optFns ...func(*cloudformation.Options)) (*cloudformation.CreateStackInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateStackInstances", varargs...)
	ret0, _ := ret[0].(*cloudformation.CreateStackInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStackInstances indicates an expected call of CreateStackInstances.
func (mr *MockCloudFormationApiClientMockRecorder) CreateStackInstances(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStackInstances", reflect.TypeOf((*MockCloudFormationApiClient)(nil).CreateStackInstances), varargs...)
}

// CreateStackSet mocks base method.
func (m *MockCloudFormationApiClient) CreateStackSet(ctx context.Context, params *cloudformation.CreateStackSetInput, optFns ...func(*cloudformation.Options)) (*cloudformation.CreateStackSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateStackSet", varargs...)
	ret0, _ := ret[0].(*cloudformation.CreateStackSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStackSet indicates an expected call of CreateStackSet.
func (mr *MockCloudFormationApiClientMockRecorder) CreateStackSet(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStackSet", reflect.TypeOf((*MockCloudFormationApiClient)(nil).CreateStackSet), varargs...)
}

// DeactivateOrganizationsAccess mocks base method.
func (m *MockCloudFormationApiClient) DeactivateOrganizationsAccess(ctx context.Context, params *cloudformation.DeactivateOrganizationsAccessInput, optFns ...func(*cloudformation.Options)) (*cloudformation.DeactivateOrganizationsAccessOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeactivateOrganizationsAccess", varargs...)
	ret0, _ := ret[0].(*cloudformation.DeactivateOrganizationsAccessOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeactivateOrganizationsAccess indicates an expected call of DeactivateOrganizationsAccess.
func (mr *MockCloudFormationApiClientMockRecorder) DeactivateOrganizationsAccess(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateOrganizationsAccess", reflect.TypeOf((*MockCloudFormationApiClient)(nil).DeactivateOrganizationsAccess), varargs...)
}

// DeactivateType mocks base method.
func (m *MockCloudFormationApiClient) DeactivateType(ctx context.Context, params *cloudformation.DeactivateTypeInput, optFns ...func(*cloudformation.Options)) (*cloudformation.DeactivateTypeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeactivateType", varargs...)
	ret0, _ := ret[0].(*cloudformation.DeactivateTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeactivateType indicates an expected call of DeactivateType.
func (mr *MockCloudFormationApiClientMockRecorder) DeactivateType(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateType", reflect.TypeOf((*MockCloudFormationApiClient)(nil).DeactivateType), varargs...)
}

// DeleteChangeSet mocks base method.
func (m *MockCloudFormationApiClient) DeleteChangeSet(ctx context.Context, params *cloudformation.DeleteChangeSetInput, optFns ...func(*cloudformation.Options)) (*cloudformation.DeleteChangeSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteChangeSet", varargs...)
	ret0, _ := ret[0].(*cloudformation.DeleteChangeSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChangeSet indicates an expected call of DeleteChangeSet.
func (mr *MockCloudFormationApiClientMockRecorder) DeleteChangeSet(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChangeSet", reflect.TypeOf((*MockCloudFormationApiClient)(nil).DeleteChangeSet), varargs...)
}

// DeleteStack mocks base method.
func (m *MockCloudFormationApiClient) DeleteStack(ctx context.Context, params *cloudformation.DeleteStackInput, optFns ...func(*cloudformation.Options)) (*cloudformation.DeleteStackOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteStack", varargs...)
	ret0, _ := ret[0].(*cloudformation.DeleteStackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStack indicates an expected call of DeleteStack.
func (mr *MockCloudFormationApiClientMockRecorder) DeleteStack(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStack", reflect.TypeOf((*MockCloudFormationApiClient)(nil).DeleteStack), varargs...)
}

// DeleteStackInstances mocks base method.
func (m *MockCloudFormationApiClient) DeleteStackInstances(ctx context.Context, params *cloudformation.DeleteStackInstancesInput, optFns ...func(*cloudformation.Options)) (*cloudformation.DeleteStackInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteStackInstances", varargs...)
	ret0, _ := ret[0].(*cloudformation.DeleteStackInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStackInstances indicates an expected call of DeleteStackInstances.
func (mr *MockCloudFormationApiClientMockRecorder) DeleteStackInstances(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStackInstances", reflect.TypeOf((*MockCloudFormationApiClient)(nil).DeleteStackInstances), varargs...)
}

// DeleteStackSet mocks base method.
func (m *MockCloudFormationApiClient) DeleteStackSet(ctx context.Context, params *cloudformation.DeleteStackSetInput, optFns ...func(*cloudformation.Options)) (*cloudformation.DeleteStackSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteStackSet", varargs...)
	ret0, _ := ret[0].(*cloudformation.DeleteStackSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStackSet indicates an expected call of DeleteStackSet.
func (mr *MockCloudFormationApiClientMockRecorder) DeleteStackSet(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStackSet", reflect.TypeOf((*MockCloudFormationApiClient)(nil).DeleteStackSet), varargs...)
}

// DeregisterType mocks base method.
func (m *MockCloudFormationApiClient) DeregisterType(ctx context.Context, params *cloudformation.DeregisterTypeInput, optFns ...func(*cloudformation.Options)) (*cloudformation.DeregisterTypeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeregisterType", varargs...)
	ret0, _ := ret[0].(*cloudformation.DeregisterTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterType indicates an expected call of DeregisterType.
func (mr *MockCloudFormationApiClientMockRecorder) DeregisterType(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterType", reflect.TypeOf((*MockCloudFormationApiClient)(nil).DeregisterType), varargs...)
}

// DescribeAccountLimits mocks base method.
func (m *MockCloudFormationApiClient) DescribeAccountLimits(ctx context.Context, params *cloudformation.DescribeAccountLimitsInput, optFns ...func(*cloudformation.Options)) (*cloudformation.DescribeAccountLimitsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAccountLimits", varargs...)
	ret0, _ := ret[0].(*cloudformation.DescribeAccountLimitsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAccountLimits indicates an expected call of DescribeAccountLimits.
func (mr *MockCloudFormationApiClientMockRecorder) DescribeAccountLimits(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccountLimits", reflect.TypeOf((*MockCloudFormationApiClient)(nil).DescribeAccountLimits), varargs...)
}

// DescribeChangeSet mocks base method.
func (m *MockCloudFormationApiClient) DescribeChangeSet(ctx context.Context, params *cloudformation.DescribeChangeSetInput, optFns ...func(*cloudformation.Options)) (*cloudformation.DescribeChangeSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeChangeSet", varargs...)
	ret0, _ := ret[0].(*cloudformation.DescribeChangeSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeChangeSet indicates an expected call of DescribeChangeSet.
func (mr *MockCloudFormationApiClientMockRecorder) DescribeChangeSet(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeChangeSet", reflect.TypeOf((*MockCloudFormationApiClient)(nil).DescribeChangeSet), varargs...)
}

// DescribeChangeSetHooks mocks base method.
func (m *MockCloudFormationApiClient) DescribeChangeSetHooks(ctx context.Context, params *cloudformation.DescribeChangeSetHooksInput, optFns ...func(*cloudformation.Options)) (*cloudformation.DescribeChangeSetHooksOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeChangeSetHooks", varargs...)
	ret0, _ := ret[0].(*cloudformation.DescribeChangeSetHooksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeChangeSetHooks indicates an expected call of DescribeChangeSetHooks.
func (mr *MockCloudFormationApiClientMockRecorder) DescribeChangeSetHooks(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeChangeSetHooks", reflect.TypeOf((*MockCloudFormationApiClient)(nil).DescribeChangeSetHooks), varargs...)
}

// DescribeOrganizationsAccess mocks base method.
func (m *MockCloudFormationApiClient) DescribeOrganizationsAccess(ctx context.Context, params *cloudformation.DescribeOrganizationsAccessInput, optFns ...func(*cloudformation.Options)) (*cloudformation.DescribeOrganizationsAccessOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeOrganizationsAccess", varargs...)
	ret0, _ := ret[0].(*cloudformation.DescribeOrganizationsAccessOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeOrganizationsAccess indicates an expected call of DescribeOrganizationsAccess.
func (mr *MockCloudFormationApiClientMockRecorder) DescribeOrganizationsAccess(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOrganizationsAccess", reflect.TypeOf((*MockCloudFormationApiClient)(nil).DescribeOrganizationsAccess), varargs...)
}

// DescribePublisher mocks base method.
func (m *MockCloudFormationApiClient) DescribePublisher(ctx context.Context, params *cloudformation.DescribePublisherInput, optFns ...func(*cloudformation.Options)) (*cloudformation.DescribePublisherOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePublisher", varargs...)
	ret0, _ := ret[0].(*cloudformation.DescribePublisherOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePublisher indicates an expected call of DescribePublisher.
func (mr *MockCloudFormationApiClientMockRecorder) DescribePublisher(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePublisher", reflect.TypeOf((*MockCloudFormationApiClient)(nil).DescribePublisher), varargs...)
}

// DescribeStackDriftDetectionStatus mocks base method.
func (m *MockCloudFormationApiClient) DescribeStackDriftDetectionStatus(ctx context.Context, params *cloudformation.DescribeStackDriftDetectionStatusInput, optFns ...func(*cloudformation.Options)) (*cloudformation.DescribeStackDriftDetectionStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeStackDriftDetectionStatus", varargs...)
	ret0, _ := ret[0].(*cloudformation.DescribeStackDriftDetectionStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStackDriftDetectionStatus indicates an expected call of DescribeStackDriftDetectionStatus.
func (mr *MockCloudFormationApiClientMockRecorder) DescribeStackDriftDetectionStatus(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStackDriftDetectionStatus", reflect.TypeOf((*MockCloudFormationApiClient)(nil).DescribeStackDriftDetectionStatus), varargs...)
}

// DescribeStackEvents mocks base method.
func (m *MockCloudFormationApiClient) DescribeStackEvents(ctx context.Context, params *cloudformation.DescribeStackEventsInput, optFns ...func(*cloudformation.Options)) (*cloudformation.DescribeStackEventsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeStackEvents", varargs...)
	ret0, _ := ret[0].(*cloudformation.DescribeStackEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStackEvents indicates an expected call of DescribeStackEvents.
func (mr *MockCloudFormationApiClientMockRecorder) DescribeStackEvents(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStackEvents", reflect.TypeOf((*MockCloudFormationApiClient)(nil).DescribeStackEvents), varargs...)
}

// DescribeStackInstance mocks base method.
func (m *MockCloudFormationApiClient) DescribeStackInstance(ctx context.Context, params *cloudformation.DescribeStackInstanceInput, optFns ...func(*cloudformation.Options)) (*cloudformation.DescribeStackInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeStackInstance", varargs...)
	ret0, _ := ret[0].(*cloudformation.DescribeStackInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStackInstance indicates an expected call of DescribeStackInstance.
func (mr *MockCloudFormationApiClientMockRecorder) DescribeStackInstance(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStackInstance", reflect.TypeOf((*MockCloudFormationApiClient)(nil).DescribeStackInstance), varargs...)
}

// DescribeStackResource mocks base method.
func (m *MockCloudFormationApiClient) DescribeStackResource(ctx context.Context, params *cloudformation.DescribeStackResourceInput, optFns ...func(*cloudformation.Options)) (*cloudformation.DescribeStackResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeStackResource", varargs...)
	ret0, _ := ret[0].(*cloudformation.DescribeStackResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStackResource indicates an expected call of DescribeStackResource.
func (mr *MockCloudFormationApiClientMockRecorder) DescribeStackResource(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStackResource", reflect.TypeOf((*MockCloudFormationApiClient)(nil).DescribeStackResource), varargs...)
}

// DescribeStackResourceDrifts mocks base method.
func (m *MockCloudFormationApiClient) DescribeStackResourceDrifts(ctx context.Context, params *cloudformation.DescribeStackResourceDriftsInput, optFns ...func(*cloudformation.Options)) (*cloudformation.DescribeStackResourceDriftsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeStackResourceDrifts", varargs...)
	ret0, _ := ret[0].(*cloudformation.DescribeStackResourceDriftsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStackResourceDrifts indicates an expected call of DescribeStackResourceDrifts.
func (mr *MockCloudFormationApiClientMockRecorder) DescribeStackResourceDrifts(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStackResourceDrifts", reflect.TypeOf((*MockCloudFormationApiClient)(nil).DescribeStackResourceDrifts), varargs...)
}

// DescribeStackResources mocks base method.
func (m *MockCloudFormationApiClient) DescribeStackResources(ctx context.Context, params *cloudformation.DescribeStackResourcesInput, optFns ...func(*cloudformation.Options)) (*cloudformation.DescribeStackResourcesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeStackResources", varargs...)
	ret0, _ := ret[0].(*cloudformation.DescribeStackResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStackResources indicates an expected call of DescribeStackResources.
func (mr *MockCloudFormationApiClientMockRecorder) DescribeStackResources(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStackResources", reflect.TypeOf((*MockCloudFormationApiClient)(nil).DescribeStackResources), varargs...)
}

// DescribeStackSet mocks base method.
func (m *MockCloudFormationApiClient) DescribeStackSet(ctx context.Context, params *cloudformation.DescribeStackSetInput, optFns ...func(*cloudformation.Options)) (*cloudformation.DescribeStackSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeStackSet", varargs...)
	ret0, _ := ret[0].(*cloudformation.DescribeStackSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStackSet indicates an expected call of DescribeStackSet.
func (mr *MockCloudFormationApiClientMockRecorder) DescribeStackSet(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStackSet", reflect.TypeOf((*MockCloudFormationApiClient)(nil).DescribeStackSet), varargs...)
}

// DescribeStackSetOperation mocks base method.
func (m *MockCloudFormationApiClient) DescribeStackSetOperation(ctx context.Context, params *cloudformation.DescribeStackSetOperationInput, optFns ...func(*cloudformation.Options)) (*cloudformation.DescribeStackSetOperationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeStackSetOperation", varargs...)
	ret0, _ := ret[0].(*cloudformation.DescribeStackSetOperationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStackSetOperation indicates an expected call of DescribeStackSetOperation.
func (mr *MockCloudFormationApiClientMockRecorder) DescribeStackSetOperation(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStackSetOperation", reflect.TypeOf((*MockCloudFormationApiClient)(nil).DescribeStackSetOperation), varargs...)
}

// DescribeStacks mocks base method.
func (m *MockCloudFormationApiClient) DescribeStacks(ctx context.Context, params *cloudformation.DescribeStacksInput, optFns ...func(*cloudformation.Options)) (*cloudformation.DescribeStacksOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeStacks", varargs...)
	ret0, _ := ret[0].(*cloudformation.DescribeStacksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStacks indicates an expected call of DescribeStacks.
func (mr *MockCloudFormationApiClientMockRecorder) DescribeStacks(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStacks", reflect.TypeOf((*MockCloudFormationApiClient)(nil).DescribeStacks), varargs...)
}

// DescribeType mocks base method.
func (m *MockCloudFormationApiClient) DescribeType(ctx context.Context, params *cloudformation.DescribeTypeInput, optFns ...func(*cloudformation.Options)) (*cloudformation.DescribeTypeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeType", varargs...)
	ret0, _ := ret[0].(*cloudformation.DescribeTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeType indicates an expected call of DescribeType.
func (mr *MockCloudFormationApiClientMockRecorder) DescribeType(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeType", reflect.TypeOf((*MockCloudFormationApiClient)(nil).DescribeType), varargs...)
}

// DescribeTypeRegistration mocks base method.
func (m *MockCloudFormationApiClient) DescribeTypeRegistration(ctx context.Context, params *cloudformation.DescribeTypeRegistrationInput, optFns ...func(*cloudformation.Options)) (*cloudformation.DescribeTypeRegistrationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTypeRegistration", varargs...)
	ret0, _ := ret[0].(*cloudformation.DescribeTypeRegistrationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTypeRegistration indicates an expected call of DescribeTypeRegistration.
func (mr *MockCloudFormationApiClientMockRecorder) DescribeTypeRegistration(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTypeRegistration", reflect.TypeOf((*MockCloudFormationApiClient)(nil).DescribeTypeRegistration), varargs...)
}

// DetectStackDrift mocks base method.
func (m *MockCloudFormationApiClient) DetectStackDrift(ctx context.Context, params *cloudformation.DetectStackDriftInput, optFns ...func(*cloudformation.Options)) (*cloudformation.DetectStackDriftOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DetectStackDrift", varargs...)
	ret0, _ := ret[0].(*cloudformation.DetectStackDriftOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectStackDrift indicates an expected call of DetectStackDrift.
func (mr *MockCloudFormationApiClientMockRecorder) DetectStackDrift(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectStackDrift", reflect.TypeOf((*MockCloudFormationApiClient)(nil).DetectStackDrift), varargs...)
}

// DetectStackResourceDrift mocks base method.
func (m *MockCloudFormationApiClient) DetectStackResourceDrift(ctx context.Context, params *cloudformation.DetectStackResourceDriftInput, optFns ...func(*cloudformation.Options)) (*cloudformation.DetectStackResourceDriftOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DetectStackResourceDrift", varargs...)
	ret0, _ := ret[0].(*cloudformation.DetectStackResourceDriftOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectStackResourceDrift indicates an expected call of DetectStackResourceDrift.
func (mr *MockCloudFormationApiClientMockRecorder) DetectStackResourceDrift(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectStackResourceDrift", reflect.TypeOf((*MockCloudFormationApiClient)(nil).DetectStackResourceDrift), varargs...)
}

// DetectStackSetDrift mocks base method.
func (m *MockCloudFormationApiClient) DetectStackSetDrift(ctx context.Context, params *cloudformation.DetectStackSetDriftInput, optFns ...func(*cloudformation.Options)) (*cloudformation.DetectStackSetDriftOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DetectStackSetDrift", varargs...)
	ret0, _ := ret[0].(*cloudformation.DetectStackSetDriftOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectStackSetDrift indicates an expected call of DetectStackSetDrift.
func (mr *MockCloudFormationApiClientMockRecorder) DetectStackSetDrift(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectStackSetDrift", reflect.TypeOf((*MockCloudFormationApiClient)(nil).DetectStackSetDrift), varargs...)
}

// EstimateTemplateCost mocks base method.
func (m *MockCloudFormationApiClient) EstimateTemplateCost(ctx context.Context, params *cloudformation.EstimateTemplateCostInput, optFns ...func(*cloudformation.Options)) (*cloudformation.EstimateTemplateCostOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EstimateTemplateCost", varargs...)
	ret0, _ := ret[0].(*cloudformation.EstimateTemplateCostOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateTemplateCost indicates an expected call of EstimateTemplateCost.
func (mr *MockCloudFormationApiClientMockRecorder) EstimateTemplateCost(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateTemplateCost", reflect.TypeOf((*MockCloudFormationApiClient)(nil).EstimateTemplateCost), varargs...)
}

// ExecuteChangeSet mocks base method.
func (m *MockCloudFormationApiClient) ExecuteChangeSet(ctx context.Context, params *cloudformation.ExecuteChangeSetInput, optFns ...func(*cloudformation.Options)) (*cloudformation.ExecuteChangeSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteChangeSet", varargs...)
	ret0, _ := ret[0].(*cloudformation.ExecuteChangeSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteChangeSet indicates an expected call of ExecuteChangeSet.
func (mr *MockCloudFormationApiClientMockRecorder) ExecuteChangeSet(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteChangeSet", reflect.TypeOf((*MockCloudFormationApiClient)(nil).ExecuteChangeSet), varargs...)
}

// GetStackPolicy mocks base method.
func (m *MockCloudFormationApiClient) GetStackPolicy(ctx context.Context, params *cloudformation.GetStackPolicyInput, optFns ...func(*cloudformation.Options)) (*cloudformation.GetStackPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStackPolicy", varargs...)
	ret0, _ := ret[0].(*cloudformation.GetStackPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStackPolicy indicates an expected call of GetStackPolicy.
func (mr *MockCloudFormationApiClientMockRecorder) GetStackPolicy(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStackPolicy", reflect.TypeOf((*MockCloudFormationApiClient)(nil).GetStackPolicy), varargs...)
}

// GetTemplate mocks base method.
func (m *MockCloudFormationApiClient) GetTemplate(ctx context.Context, params *cloudformation.GetTemplateInput, optFns ...func(*cloudformation.Options)) (*cloudformation.GetTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTemplate", varargs...)
	ret0, _ := ret[0].(*cloudformation.GetTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplate indicates an expected call of GetTemplate.
func (mr *MockCloudFormationApiClientMockRecorder) GetTemplate(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplate", reflect.TypeOf((*MockCloudFormationApiClient)(nil).GetTemplate), varargs...)
}

// GetTemplateSummary mocks base method.
func (m *MockCloudFormationApiClient) GetTemplateSummary(ctx context.Context, params *cloudformation.GetTemplateSummaryInput, optFns ...func(*cloudformation.Options)) (*cloudformation.GetTemplateSummaryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTemplateSummary", varargs...)
	ret0, _ := ret[0].(*cloudformation.GetTemplateSummaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplateSummary indicates an expected call of GetTemplateSummary.
func (mr *MockCloudFormationApiClientMockRecorder) GetTemplateSummary(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplateSummary", reflect.TypeOf((*MockCloudFormationApiClient)(nil).GetTemplateSummary), varargs...)
}

// ImportStacksToStackSet mocks base method.
func (m *MockCloudFormationApiClient) ImportStacksToStackSet(ctx context.Context, params *cloudformation.ImportStacksToStackSetInput, optFns ...func(*cloudformation.Options)) (*cloudformation.ImportStacksToStackSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImportStacksToStackSet", varargs...)
	ret0, _ := ret[0].(*cloudformation.ImportStacksToStackSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportStacksToStackSet indicates an expected call of ImportStacksToStackSet.
func (mr *MockCloudFormationApiClientMockRecorder) ImportStacksToStackSet(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportStacksToStackSet", reflect.TypeOf((*MockCloudFormationApiClient)(nil).ImportStacksToStackSet), varargs...)
}

// ListChangeSets mocks base method.
func (m *MockCloudFormationApiClient) ListChangeSets(ctx context.Context, params *cloudformation.ListChangeSetsInput, optFns ...func(*cloudformation.Options)) (*cloudformation.ListChangeSetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListChangeSets", varargs...)
	ret0, _ := ret[0].(*cloudformation.ListChangeSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChangeSets indicates an expected call of ListChangeSets.
func (mr *MockCloudFormationApiClientMockRecorder) ListChangeSets(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChangeSets", reflect.TypeOf((*MockCloudFormationApiClient)(nil).ListChangeSets), varargs...)
}

// ListExports mocks base method.
func (m *MockCloudFormationApiClient) ListExports(ctx context.Context, params *cloudformation.ListExportsInput, optFns ...func(*cloudformation.Options)) (*cloudformation.ListExportsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExports", varargs...)
	ret0, _ := ret[0].(*cloudformation.ListExportsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExports indicates an expected call of ListExports.
func (mr *MockCloudFormationApiClientMockRecorder) ListExports(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExports", reflect.TypeOf((*MockCloudFormationApiClient)(nil).ListExports), varargs...)
}

// ListImports mocks base method.
func (m *MockCloudFormationApiClient) ListImports(ctx context.Context, params *cloudformation.ListImportsInput, optFns ...func(*cloudformation.Options)) (*cloudformation.ListImportsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListImports", varargs...)
	ret0, _ := ret[0].(*cloudformation.ListImportsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImports indicates an expected call of ListImports.
func (mr *MockCloudFormationApiClientMockRecorder) ListImports(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImports", reflect.TypeOf((*MockCloudFormationApiClient)(nil).ListImports), varargs...)
}

// ListStackInstanceResourceDrifts mocks base method.
func (m *MockCloudFormationApiClient) ListStackInstanceResourceDrifts(ctx context.Context, params *cloudformation.ListStackInstanceResourceDriftsInput, optFns ...func(*cloudformation.Options)) (*cloudformation.ListStackInstanceResourceDriftsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStackInstanceResourceDrifts", varargs...)
	ret0, _ := ret[0].(*cloudformation.ListStackInstanceResourceDriftsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStackInstanceResourceDrifts indicates an expected call of ListStackInstanceResourceDrifts.
func (mr *MockCloudFormationApiClientMockRecorder) ListStackInstanceResourceDrifts(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStackInstanceResourceDrifts", reflect.TypeOf((*MockCloudFormationApiClient)(nil).ListStackInstanceResourceDrifts), varargs...)
}

// ListStackInstances mocks base method.
func (m *MockCloudFormationApiClient) ListStackInstances(ctx context.Context, params *cloudformation.ListStackInstancesInput, optFns ...func(*cloudformation.Options)) (*cloudformation.ListStackInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStackInstances", varargs...)
	ret0, _ := ret[0].(*cloudformation.ListStackInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStackInstances indicates an expected call of ListStackInstances.
func (mr *MockCloudFormationApiClientMockRecorder) ListStackInstances(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStackInstances", reflect.TypeOf((*MockCloudFormationApiClient)(nil).ListStackInstances), varargs...)
}

// ListStackResources mocks base method.
func (m *MockCloudFormationApiClient) ListStackResources(ctx context.Context, params *cloudformation.ListStackResourcesInput, optFns ...func(*cloudformation.Options)) (*cloudformation.ListStackResourcesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStackResources", varargs...)
	ret0, _ := ret[0].(*cloudformation.ListStackResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStackResources indicates an expected call of ListStackResources.
func (mr *MockCloudFormationApiClientMockRecorder) ListStackResources(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStackResources", reflect.TypeOf((*MockCloudFormationApiClient)(nil).ListStackResources), varargs...)
}

// ListStackSetOperationResults mocks base method.
func (m *MockCloudFormationApiClient) ListStackSetOperationResults(ctx context.Context, params *cloudformation.ListStackSetOperationResultsInput, optFns ...func(*cloudformation.Options)) (*cloudformation.ListStackSetOperationResultsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStackSetOperationResults", varargs...)
	ret0, _ := ret[0].(*cloudformation.ListStackSetOperationResultsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStackSetOperationResults indicates an expected call of ListStackSetOperationResults.
func (mr *MockCloudFormationApiClientMockRecorder) ListStackSetOperationResults(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStackSetOperationResults", reflect.TypeOf((*MockCloudFormationApiClient)(nil).ListStackSetOperationResults), varargs...)
}

// ListStackSetOperations mocks base method.
func (m *MockCloudFormationApiClient) ListStackSetOperations(ctx context.Context, params *cloudformation.ListStackSetOperationsInput, optFns ...func(*cloudformation.Options)) (*cloudformation.ListStackSetOperationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStackSetOperations", varargs...)
	ret0, _ := ret[0].(*cloudformation.ListStackSetOperationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStackSetOperations indicates an expected call of ListStackSetOperations.
func (mr *MockCloudFormationApiClientMockRecorder) ListStackSetOperations(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStackSetOperations", reflect.TypeOf((*MockCloudFormationApiClient)(nil).ListStackSetOperations), varargs...)
}

// ListStackSets mocks base method.
func (m *MockCloudFormationApiClient) ListStackSets(ctx context.Context, params *cloudformation.ListStackSetsInput, optFns ...func(*cloudformation.Options)) (*cloudformation.ListStackSetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStackSets", varargs...)
	ret0, _ := ret[0].(*cloudformation.ListStackSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStackSets indicates an expected call of ListStackSets.
func (mr *MockCloudFormationApiClientMockRecorder) ListStackSets(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStackSets", reflect.TypeOf((*MockCloudFormationApiClient)(nil).ListStackSets), varargs...)
}

// ListStacks mocks base method.
func (m *MockCloudFormationApiClient) ListStacks(ctx context.Context, params *cloudformation.ListStacksInput, optFns ...func(*cloudformation.Options)) (*cloudformation.ListStacksOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStacks", varargs...)
	ret0, _ := ret[0].(*cloudformation.ListStacksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStacks indicates an expected call of ListStacks.
func (mr *MockCloudFormationApiClientMockRecorder) ListStacks(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStacks", reflect.TypeOf((*MockCloudFormationApiClient)(nil).ListStacks), varargs...)
}

// ListTypeRegistrations mocks base method.
func (m *MockCloudFormationApiClient) ListTypeRegistrations(ctx context.Context, params *cloudformation.ListTypeRegistrationsInput, optFns ...func(*cloudformation.Options)) (*cloudformation.ListTypeRegistrationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTypeRegistrations", varargs...)
	ret0, _ := ret[0].(*cloudformation.ListTypeRegistrationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTypeRegistrations indicates an expected call of ListTypeRegistrations.
func (mr *MockCloudFormationApiClientMockRecorder) ListTypeRegistrations(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTypeRegistrations", reflect.TypeOf((*MockCloudFormationApiClient)(nil).ListTypeRegistrations), varargs...)
}

// ListTypeVersions mocks base method.
func (m *MockCloudFormationApiClient) ListTypeVersions(ctx context.Context, params *cloudformation.ListTypeVersionsInput, optFns ...func(*cloudformation.Options)) (*cloudformation.ListTypeVersionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTypeVersions", varargs...)
	ret0, _ := ret[0].(*cloudformation.ListTypeVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTypeVersions indicates an expected call of ListTypeVersions.
func (mr *MockCloudFormationApiClientMockRecorder) ListTypeVersions(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTypeVersions", reflect.TypeOf((*MockCloudFormationApiClient)(nil).ListTypeVersions), varargs...)
}

// ListTypes mocks base method.
func (m *MockCloudFormationApiClient) ListTypes(ctx context.Context, params *cloudformation.ListTypesInput, optFns ...func(*cloudformation.Options)) (*cloudformation.ListTypesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTypes", varargs...)
	ret0, _ := ret[0].(*cloudformation.ListTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTypes indicates an expected call of ListTypes.
func (mr *MockCloudFormationApiClientMockRecorder) ListTypes(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTypes", reflect.TypeOf((*MockCloudFormationApiClient)(nil).ListTypes), varargs...)
}

// PublishType mocks base method.
func (m *MockCloudFormationApiClient) PublishType(ctx context.Context, params *cloudformation.PublishTypeInput, optFns ...func(*cloudformation.Options)) (*cloudformation.PublishTypeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublishType", varargs...)
	ret0, _ := ret[0].(*cloudformation.PublishTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishType indicates an expected call of PublishType.
func (mr *MockCloudFormationApiClientMockRecorder) PublishType(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishType", reflect.TypeOf((*MockCloudFormationApiClient)(nil).PublishType), varargs...)
}

// RecordHandlerProgress mocks base method.
func (m *MockCloudFormationApiClient) RecordHandlerProgress(ctx context.Context, params *cloudformation.RecordHandlerProgressInput, optFns ...func(*cloudformation.Options)) (*cloudformation.RecordHandlerProgressOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RecordHandlerProgress", varargs...)
	ret0, _ := ret[0].(*cloudformation.RecordHandlerProgressOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecordHandlerProgress indicates an expected call of RecordHandlerProgress.
func (mr *MockCloudFormationApiClientMockRecorder) RecordHandlerProgress(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordHandlerProgress", reflect.TypeOf((*MockCloudFormationApiClient)(nil).RecordHandlerProgress), varargs...)
}

// RegisterPublisher mocks base method.
func (m *MockCloudFormationApiClient) RegisterPublisher(ctx context.Context, params *cloudformation.RegisterPublisherInput, optFns ...func(*cloudformation.Options)) (*cloudformation.RegisterPublisherOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterPublisher", varargs...)
	ret0, _ := ret[0].(*cloudformation.RegisterPublisherOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterPublisher indicates an expected call of RegisterPublisher.
func (mr *MockCloudFormationApiClientMockRecorder) RegisterPublisher(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterPublisher", reflect.TypeOf((*MockCloudFormationApiClient)(nil).RegisterPublisher), varargs...)
}

// RegisterType mocks base method.
func (m *MockCloudFormationApiClient) RegisterType(ctx context.Context, params *cloudformation.RegisterTypeInput, optFns ...func(*cloudformation.Options)) (*cloudformation.RegisterTypeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterType", varargs...)
	ret0, _ := ret[0].(*cloudformation.RegisterTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterType indicates an expected call of RegisterType.
func (mr *MockCloudFormationApiClientMockRecorder) RegisterType(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterType", reflect.TypeOf((*MockCloudFormationApiClient)(nil).RegisterType), varargs...)
}

// RollbackStack mocks base method.
func (m *MockCloudFormationApiClient) RollbackStack(ctx context.Context, params *cloudformation.RollbackStackInput, optFns ...func(*cloudformation.Options)) (*cloudformation.RollbackStackOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RollbackStack", varargs...)
	ret0, _ := ret[0].(*cloudformation.RollbackStackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollbackStack indicates an expected call of RollbackStack.
func (mr *MockCloudFormationApiClientMockRecorder) RollbackStack(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackStack", reflect.TypeOf((*MockCloudFormationApiClient)(nil).RollbackStack), varargs...)
}

// SetStackPolicy mocks base method.
func (m *MockCloudFormationApiClient) SetStackPolicy(ctx context.Context, params *cloudformation.SetStackPolicyInput, optFns ...func(*cloudformation.Options)) (*cloudformation.SetStackPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetStackPolicy", varargs...)
	ret0, _ := ret[0].(*cloudformation.SetStackPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetStackPolicy indicates an expected call of SetStackPolicy.
func (mr *MockCloudFormationApiClientMockRecorder) SetStackPolicy(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStackPolicy", reflect.TypeOf((*MockCloudFormationApiClient)(nil).SetStackPolicy), varargs...)
}

// SetTypeConfiguration mocks base method.
func (m *MockCloudFormationApiClient) SetTypeConfiguration(ctx context.Context, params *cloudformation.SetTypeConfigurationInput, optFns ...func(*cloudformation.Options)) (*cloudformation.SetTypeConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetTypeConfiguration", varargs...)
	ret0, _ := ret[0].(*cloudformation.SetTypeConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetTypeConfiguration indicates an expected call of SetTypeConfiguration.
func (mr *MockCloudFormationApiClientMockRecorder) SetTypeConfiguration(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTypeConfiguration", reflect.TypeOf((*MockCloudFormationApiClient)(nil).SetTypeConfiguration), varargs...)
}

// SetTypeDefaultVersion mocks base method.
func (m *MockCloudFormationApiClient) SetTypeDefaultVersion(ctx context.Context, params *cloudformation.SetTypeDefaultVersionInput, optFns ...func(*cloudformation.Options)) (*cloudformation.SetTypeDefaultVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetTypeDefaultVersion", varargs...)
	ret0, _ := ret[0].(*cloudformation.SetTypeDefaultVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetTypeDefaultVersion indicates an expected call of SetTypeDefaultVersion.
func (mr *MockCloudFormationApiClientMockRecorder) SetTypeDefaultVersion(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTypeDefaultVersion", reflect.TypeOf((*MockCloudFormationApiClient)(nil).SetTypeDefaultVersion), varargs...)
}

// SignalResource mocks base method.
func (m *MockCloudFormationApiClient) SignalResource(ctx context.Context, params *cloudformation.SignalResourceInput, optFns ...func(*cloudformation.Options)) (*cloudformation.SignalResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignalResource", varargs...)
	ret0, _ := ret[0].(*cloudformation.SignalResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignalResource indicates an expected call of SignalResource.
func (mr *MockCloudFormationApiClientMockRecorder) SignalResource(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignalResource", reflect.TypeOf((*MockCloudFormationApiClient)(nil).SignalResource), varargs...)
}

// StopStackSetOperation mocks base method.
func (m *MockCloudFormationApiClient) StopStackSetOperation(ctx context.Context, params *cloudformation.StopStackSetOperationInput, optFns ...func(*cloudformation.Options)) (*cloudformation.StopStackSetOperationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopStackSetOperation", varargs...)
	ret0, _ := ret[0].(*cloudformation.StopStackSetOperationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopStackSetOperation indicates an expected call of StopStackSetOperation.
func (mr *MockCloudFormationApiClientMockRecorder) StopStackSetOperation(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopStackSetOperation", reflect.TypeOf((*MockCloudFormationApiClient)(nil).StopStackSetOperation), varargs...)
}

// TestType mocks base method.
func (m *MockCloudFormationApiClient) TestType(ctx context.Context, params *cloudformation.TestTypeInput, optFns ...func(*cloudformation.Options)) (*cloudformation.TestTypeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TestType", varargs...)
	ret0, _ := ret[0].(*cloudformation.TestTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestType indicates an expected call of TestType.
func (mr *MockCloudFormationApiClientMockRecorder) TestType(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestType", reflect.TypeOf((*MockCloudFormationApiClient)(nil).TestType), varargs...)
}

// UpdateStack mocks base method.
func (m *MockCloudFormationApiClient) UpdateStack(ctx context.Context, params *cloudformation.UpdateStackInput, optFns ...func(*cloudformation.Options)) (*cloudformation.UpdateStackOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateStack", varargs...)
	ret0, _ := ret[0].(*cloudformation.UpdateStackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStack indicates an expected call of UpdateStack.
func (mr *MockCloudFormationApiClientMockRecorder) UpdateStack(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStack", reflect.TypeOf((*MockCloudFormationApiClient)(nil).UpdateStack), varargs...)
}

// UpdateStackInstances mocks base method.
func (m *MockCloudFormationApiClient) UpdateStackInstances(ctx context.Context, params *cloudformation.UpdateStackInstancesInput, optFns ...func(*cloudformation.Options)) (*cloudformation.UpdateStackInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateStackInstances", varargs...)
	ret0, _ := ret[0].(*cloudformation.UpdateStackInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStackInstances indicates an expected call of UpdateStackInstances.
func (mr *MockCloudFormationApiClientMockRecorder) UpdateStackInstances(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStackInstances", reflect.TypeOf((*MockCloudFormationApiClient)(nil).UpdateStackInstances), varargs...)
}

// UpdateStackSet mocks base method.
func (m *MockCloudFormationApiClient) UpdateStackSet(ctx context.Context, params *cloudformation.UpdateStackSetInput, optFns ...func(*cloudformation.Options)) (*cloudformation.UpdateStackSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateStackSet", varargs...)
	ret0, _ := ret[0].(*cloudformation.UpdateStackSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStackSet indicates an expected call of UpdateStackSet.
func (mr *MockCloudFormationApiClientMockRecorder) UpdateStackSet(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStackSet", reflect.TypeOf((*MockCloudFormationApiClient)(nil).UpdateStackSet), varargs...)
}

// UpdateTerminationProtection mocks base method.
func (m *MockCloudFormationApiClient) UpdateTerminationProtection(ctx context.Context, params *cloudformation.UpdateTerminationProtectionInput, optFns ...func(*cloudformation.Options)) (*cloudformation.UpdateTerminationProtectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTerminationProtection", varargs...)
	ret0, _ := ret[0].(*cloudformation.UpdateTerminationProtectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTerminationProtection indicates an expected call of UpdateTerminationProtection.
func (mr *MockCloudFormationApiClientMockRecorder) UpdateTerminationProtection(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTerminationProtection", reflect.TypeOf((*MockCloudFormationApiClient)(nil).UpdateTerminationProtection), varargs...)
}

// ValidateTemplate mocks base method.
func (m *MockCloudFormationApiClient) ValidateTemplate(ctx context.Context, params *cloudformation.ValidateTemplateInput, optFns ...func(*cloudformation.Options)) (*cloudformation.ValidateTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateTemplate", varargs...)
	ret0, _ := ret[0].(*cloudformation.ValidateTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateTemplate indicates an expected call of ValidateTemplate.
func (mr *MockCloudFormationApiClientMockRecorder) ValidateTemplate(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateTemplate", reflect.TypeOf((*MockCloudFormationApiClient)(nil).ValidateTemplate), varargs...)
}
