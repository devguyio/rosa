// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/aws/api_interface/sts_api_client.go
//
// Generated by this command:
//
//	mockgen-v0.4.0 -source=pkg/aws/api_interface/sts_api_client.go -package=mocks -destination=pkg/aws/mocks/mock_sts_api_client.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	sts "github.com/aws/aws-sdk-go-v2/service/sts"
	gomock "go.uber.org/mock/gomock"
)

// MockStsApiClient is a mock of StsApiClient interface.
type MockStsApiClient struct {
	ctrl     *gomock.Controller
	recorder *MockStsApiClientMockRecorder
}

// MockStsApiClientMockRecorder is the mock recorder for MockStsApiClient.
type MockStsApiClientMockRecorder struct {
	mock *MockStsApiClient
}

// NewMockStsApiClient creates a new mock instance.
func NewMockStsApiClient(ctrl *gomock.Controller) *MockStsApiClient {
	mock := &MockStsApiClient{ctrl: ctrl}
	mock.recorder = &MockStsApiClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStsApiClient) EXPECT() *MockStsApiClientMockRecorder {
	return m.recorder
}

// AssumeRole mocks base method.
func (m *MockStsApiClient) AssumeRole(ctx context.Context, params *sts.AssumeRoleInput, optFns ...func(*sts.Options)) (*sts.AssumeRoleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssumeRole", varargs...)
	ret0, _ := ret[0].(*sts.AssumeRoleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssumeRole indicates an expected call of AssumeRole.
func (mr *MockStsApiClientMockRecorder) AssumeRole(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssumeRole", reflect.TypeOf((*MockStsApiClient)(nil).AssumeRole), varargs...)
}

// AssumeRoleWithWebIdentity mocks base method.
func (m *MockStsApiClient) AssumeRoleWithWebIdentity(ctx context.Context, params *sts.AssumeRoleWithWebIdentityInput, optFns ...func(*sts.Options)) (*sts.AssumeRoleWithWebIdentityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssumeRoleWithWebIdentity", varargs...)
	ret0, _ := ret[0].(*sts.AssumeRoleWithWebIdentityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssumeRoleWithWebIdentity indicates an expected call of AssumeRoleWithWebIdentity.
func (mr *MockStsApiClientMockRecorder) AssumeRoleWithWebIdentity(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssumeRoleWithWebIdentity", reflect.TypeOf((*MockStsApiClient)(nil).AssumeRoleWithWebIdentity), varargs...)
}

// GetCallerIdentity mocks base method.
func (m *MockStsApiClient) GetCallerIdentity(ctx context.Context, params *sts.GetCallerIdentityInput, optFns ...func(*sts.Options)) (*sts.GetCallerIdentityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCallerIdentity", varargs...)
	ret0, _ := ret[0].(*sts.GetCallerIdentityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCallerIdentity indicates an expected call of GetCallerIdentity.
func (mr *MockStsApiClientMockRecorder) GetCallerIdentity(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCallerIdentity", reflect.TypeOf((*MockStsApiClient)(nil).GetCallerIdentity), varargs...)
}
